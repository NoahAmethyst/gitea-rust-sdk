/*
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.18.0+dev-283-gefaa9958b
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::de::Unexpected::Str;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    pub oauth2_token: Option<String>,
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new(host: String, api_key: Option<String>,oauth2_token:Option<String>) -> Configuration {
        let mut cfg = Configuration::default();
        cfg.base_path = format!("https://{}/{}", host, cfg.base_path);
        if api_key.is_some() {
            cfg.api_key = Some(ApiKey { prefix: None, key: api_key.unwrap() });
        }
        cfg
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "/api/v1".to_owned(),
            user_agent: Some("OpenAPI-Generator/1.18.0+dev-283-gefaa9958b/rust".to_owned()),
            client: reqwest::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
            oauth2_token:None,
        }
    }
}
